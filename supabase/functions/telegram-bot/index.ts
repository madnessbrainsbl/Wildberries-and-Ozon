/*
  # Telegram Bot Edge Function
  
  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram Bot API –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤.
*/

import { createClient } from 'npm:@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

interface TelegramUpdate {
  update_id: number
  message?: {
    message_id: number
    from: {
      id: number
      first_name: string
      last_name?: string
      username?: string
    }
    chat: {
      id: number
      type: string
    }
    text?: string
    web_app_data?: {
      data: string
      button_text: string
    }
  }
  callback_query?: {
    id: string
    from: {
      id: number
      first_name: string
      last_name?: string
      username?: string
    }
    data: string
    message: any
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
let currentBotToken: string | null = null

Deno.serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    })
  }

  try {
    // Validate webhook secret
    const url = new URL(req.url)
    const secret = url.searchParams.get('secret')
    const expectedSecret = Deno.env.get('TELEGRAM_WEBHOOK_SECRET')
    
    console.log('Webhook request received:', {
      method: req.method,
      url: req.url,
      secret: secret,
      expectedSecret: expectedSecret,
      headers: Object.fromEntries(req.headers.entries())
    })

    if (!secret || secret !== expectedSecret) {
      console.error('Webhook authentication failed:', { secret, expectedSecret })
      return new Response(JSON.stringify({ error: 'Unauthorized: Invalid secret' }), {
        status: 403,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      })
    }
    
    console.log('Webhook authentication successful')

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    const update: TelegramUpdate = await req.json()
    console.log('Received Telegram update:', JSON.stringify(update, null, 2))
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –º–∞–≥–∞–∑–∏–Ω —Å webhook URL
    await determineBotToken(supabase)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message) {
      console.log('Processing message:', update.message)
      await handleMessage(supabase, update.message)
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      console.log('Processing callback query:', update.callback_query)
      await handleCallbackQuery(supabase, update.callback_query)
    }

    console.log('Webhook processing completed successfully')
    return new Response(JSON.stringify({ ok: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  } catch (error) {
    console.error('Error processing update:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})

async function determineBotToken(supabase: any) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
    const { data: stores } = await supabase
      .from('stores')
      .select('telegram_bot_token')
      .not('telegram_bot_token', 'is', null)
      .eq('status', 'active')
      .limit(1)
    
    if (stores && stores.length > 0) {
      currentBotToken = stores[0].telegram_bot_token
      console.log('Determined bot token for current request')
    }
  } catch (error) {
    console.error('Error determining bot token:', error)
  }
}

async function handleMessage(supabase: any, message: any) {
  const { from, text, chat } = message
  console.log('Handling message:', { from, text, chat })
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  await upsertCustomer(supabase, from)
  
  if (text?.startsWith('/start')) {
    console.log('Processing /start command')
    await sendWelcomeMessage(from.id, extractStoreId(text))
  } else if (text === '/catalog' || text === '–ö–∞—Ç–∞–ª–æ–≥ üì¶') {
    console.log('Processing catalog command')
    await sendCatalog(from.id)
  } else if (text === '/orders' || text === '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìã') {
    console.log('Processing orders command')
    await sendOrders(supabase, from.id)
  } else if (text === '/help' || text === '–ü–æ–º–æ—â—å ‚ùì') {
    console.log('Processing help command')
    await sendHelp(from.id)
  } else {
    console.log('Processing default message')
    await sendMainMenu(from.id)
  }
}

async function handleCallbackQuery(supabase: any, callbackQuery: any) {
  const { from, data } = callbackQuery
  console.log('Handling callback query:', { from, data })
  
  if (data.startsWith('product_')) {
    const productId = data.replace('product_', '')
    await showProduct(supabase, from.id, productId)
  } else if (data.startsWith('add_to_cart_')) {
    const productId = data.replace('add_to_cart_', '')
    await addToCart(supabase, from.id, productId)
  } else if (data === 'view_cart') {
    await showCart(supabase, from.id)
  } else if (data === 'checkout') {
    await startCheckout(supabase, from.id)
  }
}

async function upsertCustomer(supabase: any, user: any) {
  console.log('Upserting customer:', user)
  const { error } = await supabase
    .from('customers')
    .upsert({
      telegram_id: user.id.toString(),
      telegram_username: user.username,
      first_name: user.first_name,
      last_name: user.last_name,
    }, {
      onConflict: 'telegram_id'
    })
  
  if (error) {
    console.error('Error upserting customer:', error)
  } else {
    console.log('Customer upserted successfully')
  }
}

async function sendWelcomeMessage(chatId: number, storeId?: string) {
  console.log('Sending welcome message to:', chatId, 'storeId:', storeId)
  const message = `
üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
  `
  
  await sendTelegramMessage(chatId, message, {
    reply_markup: {
      keyboard: [
        [{ text: '–ö–∞—Ç–∞–ª–æ–≥ üì¶' }, { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìã' }],
        [{ text: '–ö–æ—Ä–∑–∏–Ω–∞ üõí' }, { text: '–ü–æ–º–æ—â—å ‚ùì' }]
      ],
      resize_keyboard: true,
      persistent: true
    }
  })
}

async function sendCatalog(chatId: number) {
  console.log('Sending catalog to:', chatId)
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ —Ç–æ–∫–µ–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  )
  
  let storeId = 'default'
  let storeName = '–Ω–∞—à –º–∞–≥–∞–∑–∏–Ω'
  let hasWB = false
  let hasOzon = false
  
  if (currentBotToken) {
    console.log('Finding store by bot token')
    const { data: stores } = await supabase
      .from('stores')
      .select('id, name, wildberries_token, ozon_client_id')
      .eq('telegram_bot_token', currentBotToken)
      .eq('status', 'active')
      .limit(1)
    
    if (stores && stores.length > 0) {
      storeId = stores[0].id
      storeName = stores[0].name
      hasWB = !!stores[0].wildberries_token
      hasOzon = !!stores[0].ozon_client_id
      console.log(`Found store: ${storeName} (${storeId})`)
    } else {
      console.log('No store found for current bot token')
    }
  } else {
    console.log('No current bot token available')
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
    const { data: stores } = await supabase
      .from('stores')
      .select('id, name, wildberries_token, ozon_client_id')
      .not('telegram_bot_token', 'is', null)
      .eq('status', 'active')
      .limit(1)
    
    if (stores && stores.length > 0) {
      storeId = stores[0].id
      storeName = stores[0].name
      hasWB = !!stores[0].wildberries_token
      hasOzon = !!stores[0].ozon_client_id
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
  const buttons = []
  
  if (hasWB && hasOzon) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    buttons.push([
      { 
        text: 'üü£ Wildberries', 
        web_app: { url: `https://teleshop.su/miniapp/${storeId}?marketplace=wildberries` }
      },
      { 
        text: 'üîµ Ozon', 
        web_app: { url: `https://teleshop.su/miniapp/${storeId}?marketplace=ozon` }
      }
    ])
    buttons.push([
      { 
        text: 'üõçÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã', 
        web_app: { url: `https://teleshop.su/miniapp/${storeId}` }
      }
    ])
  } else if (hasWB) {
    buttons.push([
      { 
        text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ Wildberries', 
        web_app: { url: `https://teleshop.su/miniapp/${storeId}?marketplace=wildberries` }
      }
    ])
  } else if (hasOzon) {
    buttons.push([
      { 
        text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ Ozon', 
        web_app: { url: `https://teleshop.su/miniapp/${storeId}?marketplace=ozon` }
      }
    ])
  } else {
    buttons.push([
      { 
        text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', 
        web_app: { url: `https://teleshop.su/miniapp/${storeId}` }
      }
    ])
  }
  
  const message = `
üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ - ${storeName}

${hasWB && hasOzon ? '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã:' : '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —É–¥–æ–±–Ω–æ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:'}

üõçÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã
üõí –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É  
üí≥ –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã
  `
  
  await sendTelegramMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: buttons
    }
  })
}

async function sendOrders(supabase: any, chatId: number) {
  console.log('Sending orders to:', chatId)
  try {
    const { data: customer } = await supabase
      .from('customers')
      .select('id')
      .eq('telegram_id', chatId.toString())
      .single()
    
    if (!customer) {
      await sendTelegramMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.')
      return
    }
    
    const { data: orders } = await supabase
      .from('orders')
      .select(`
        *,
        order_items (
          quantity,
          price,
          products (name)
        )
      `)
      .eq('customer_id', customer.id)
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (!orders || orders.length === 0) {
      await sendTelegramMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.')
      return
    }
    
    let message = 'üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n'
    
    orders.forEach((order: any) => {
      const statusEmoji = getStatusEmoji(order.status)
      const date = new Date(order.created_at).toLocaleDateString('ru-RU')
      
      message += `${statusEmoji} –ó–∞–∫–∞–∑ ‚Ññ${order.order_number}\n`
      message += `üìÖ ${date}\n`
      message += `üí∞ ${order.total_amount} ‚ÇΩ\n`
      message += `üì¶ ${order.order_items.length} —Ç–æ–≤–∞—Ä(–æ–≤)\n\n`
    })
    
    await sendTelegramMessage(chatId, message)
  } catch (error) {
    console.error('Error fetching orders:', error)
    await sendTelegramMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.')
  }
}

async function sendHelp(chatId: number) {
  console.log('Sending help to:', chatId)
  const message = `
‚ùì –ü–æ–º–æ—â—å

üõçÔ∏è *–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:*
1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
3. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑

üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞.

üöö *–î–æ—Å—Ç–∞–≤–∫–∞:*
–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.
  `
  
  await sendTelegramMessage(chatId, message, { parse_mode: 'Markdown' })
}

async function sendMainMenu(chatId: number) {
  console.log('Sending main menu to:', chatId)
  await sendTelegramMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      keyboard: [
        [{ text: '–ö–∞—Ç–∞–ª–æ–≥ üì¶' }, { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìã' }],
        [{ text: '–ö–æ—Ä–∑–∏–Ω–∞ üõí' }, { text: '–ü–æ–º–æ—â—å ‚ùì' }]
      ],
      resize_keyboard: true,
      persistent: true
    }
  })
}

async function sendTelegramMessage(chatId: number, text: string, extra?: any) {
  console.log(`Attempting to send message to ${chatId}:`, { text, extra })
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if (!currentBotToken) {
      console.error('No current bot token available')
      return
    }
    
    const telegramApiUrl = `https://api.telegram.org/bot${currentBotToken}/sendMessage`
    
    const payload = {
      chat_id: chatId,
      text: text,
      ...extra
    }
    
    console.log('Sending to Telegram API:', { url: telegramApiUrl, payload })
    
    const response = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    })
    
    const result = await response.json()
    
    if (!response.ok) {
      console.error('Telegram API Error:', result)
    } else {
      console.log('Message sent successfully:', result)
    }
  } catch (error) {
    console.error('Error sending message to Telegram:', error)
  }
}

function extractStoreId(startText: string): string | undefined {
  const match = startText.match(/\/start (.+)/)
  return match ? match[1] : undefined
}

function getStatusEmoji(status: string): string {
  switch (status) {
    case 'pending': return '‚è≥'
    case 'confirmed': return '‚úÖ'
    case 'shipped': return 'üöö'
    case 'delivered': return 'üì¶'
    case 'cancelled': return '‚ùå'
    default: return 'üìã'
  }
}

async function showProduct(supabase: any, chatId: number, productId: string) {
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
  console.log(`Showing product ${productId} to ${chatId}`)
}

async function addToCart(supabase: any, chatId: number, productId: string) {
  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
  console.log(`Adding product ${productId} to cart for ${chatId}`)
}

async function showCart(supabase: any, chatId: number) {
  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  console.log(`Showing cart for ${chatId}`)
}

async function startCheckout(supabase: any, chatId: number) {
  // –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  console.log(`Starting checkout for ${chatId}`)
}